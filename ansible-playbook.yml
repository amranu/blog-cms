---
- name: Deploy Blog CMS Application with Docker
  hosts: all
  become: yes
  vars:
    deploy_dir: /opt/blog-cms
    app_user: blogcms
    app_group: blogcms
    domain_name: "{{ ansible_default_ipv4.address | default('localhost') }}"
    flask_port: 5000
    react_port: 3000
    nginx_port: 80
    python_version: "3.11"

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install system dependencies
      apt:
        name:
          - git
          - docker.io
          - docker-compose-plugin
          - sqlite3
          - curl
          - wget
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Stop existing services if they exist
      systemd:
        name: "{{ item }}"
        state: stopped
      ignore_errors: yes
      loop:
        - flask-api
        - react-app
        - blog-cms-docker

    - name: Start and enable Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Create application group
      group:
        name: "{{ app_group }}"
        system: yes

    - name: Create application user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        system: yes
        shell: /bin/bash
        home: "{{ deploy_dir }}"
        create_home: yes

    - name: Create deployment directory
      file:
        path: "{{ deploy_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Copy blog-cms source code from local directory
      synchronize:
        src: ./
        dest: "{{ deploy_dir }}"
        delete: yes
        recursive: yes
        rsync_opts:
          - "--exclude=ansible-playbook.yml"
          - "--exclude=inventory.ini"
          - "--exclude=ansible.cfg"
          - "--exclude=README-ansible.md"
          - "--exclude=templates/"
          - "--exclude=.git/"
          - "--exclude=.claude/"
          - "--exclude=.local/"
      delegate_to: localhost

    - name: Fix ownership of copied files
      file:
        path: "{{ deploy_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        recurse: yes

    - name: Create environment file
      template:
        src: .env.j2
        dest: "{{ deploy_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Remove old Docker containers and images
      command: docker compose down
      args:
        chdir: "{{ deploy_dir }}"
      ignore_errors: yes

    - name: Build and start Docker containers
      command: docker compose up -d --build
      args:
        chdir: "{{ deploy_dir }}"
      become_user: "{{ app_user }}"

    - name: Create systemd service for Docker Compose
      template:
        src: blog-cms-docker.service.j2
        dest: /etc/systemd/system/blog-cms-docker.service
        mode: '0644'
      notify: restart blog-cms-docker

    - name: Start and enable Docker Compose service
      systemd:
        name: blog-cms-docker
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Create admin user script
      template:
        src: create_admin.py.j2
        dest: "{{ deploy_dir }}/create_admin.py"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Copy admin script to flask container
      command: docker compose cp create_admin.py flask-api:/app/create_admin.py
      args:
        chdir: "{{ deploy_dir }}"
      ignore_errors: yes

    - name: Wait for containers to be ready
      wait_for:
        port: 80
        host: localhost
        timeout: 60

    - name: Display deployment information
      debug:
        msg:
          - "Blog CMS deployed successfully with Docker!"
          - "Application directory: {{ deploy_dir }}"
          - "Access URL: http://{{ domain_name }}"
          - "To create admin user, run: cd {{ deploy_dir }} && docker compose exec flask-api python create_admin.py"
          - "Services: blog-cms-docker (manages flask-api, react-app, nginx containers)"
          - "Container logs: docker compose logs -f [flask-api|react-app|nginx]"
          - "Service management: systemctl [start|stop|restart] blog-cms-docker"

  handlers:
    - name: restart blog-cms-docker
      systemd:
        name: blog-cms-docker
        state: restarted
        daemon_reload: yes